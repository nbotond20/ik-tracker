// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String            @id @default(auto()) @map("_id") @db.ObjectId
    name                 String?
    email                String?           @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    SubjectProgresses    SubjectProgress[]
    currentSemester      Int               @default(1)
    isCurrentSemesterSet Boolean           @default(false)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Next auth end

model Subject {
    id                String             @id @default(auto()) @map("_id") @db.ObjectId
    code              String
    consultation      Int
    courseName        String
    credit            Int
    assessmentType    AssessmentType?
    labor             Int
    lecture           Int
    practice          Int
    practiceGradeType PracticeGradeType?
    preRequirements   PreRequirement[]
    semester          Int[]
    specialisation    SpecialisationType
    subjectGroupType  SubjectGroupType
    subjectType       SubjectType
    SubjectProgresses SubjectProgress[]

    @@unique([code, specialisation])
}

model PreRequirement {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    code      String
    type      Int
    or        String[]
    Subject   Subject? @relation(fields: [subjectId], references: [id])
    subjectId String?  @db.ObjectId
}

enum AssessmentType {
    K
    X
}

enum PracticeGradeType {
    FG
    G
}

enum SpecialisationType {
    A
    B
    C
    ABC
}

enum SubjectGroupType {
    INF
    SZAM
    EGYEB
    MAT
    SZAKDOLGOZAT
}

enum SubjectType {
    KV
    KOT
    TOR
}

model SubjectProgress {
    id          String       @id @default(auto()) @map("_id") @db.ObjectId
    subjectId   String?      @db.ObjectId
    subject     Subject?     @relation(fields: [subjectId], references: [id], onDelete: SetNull)
    subjectName String?
    credit      Int?
    userId      String       @db.ObjectId
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    assessments Assessment[]
    semester    Int          @default(1)
    marks       Float[]

    @@unique([subjectId, userId, semester, subjectName])
}

model Assessment {
    id                String          @id @default(auto()) @map("_id") @db.ObjectId
    name              String
    subjectProgressId String          @db.ObjectId
    subjectProgress   SubjectProgress @relation(fields: [subjectProgressId], references: [id], onDelete: Cascade)
    result            Float?
    minResult         Float?
    maxResult         Float?
    resultType        ResultType
}

enum ResultType {
    PERCENT
    GRADE
    POINT
    PASSFAIL
}
